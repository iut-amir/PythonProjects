# create transaction class
from Blockchain.Backend.core.script import  Script
from Blockchain.Backend.util.util import bytes_needed, decode_base58, little_endian_to_int

ZERO_HASH = b'\0' * 32
REWARD = 50

# privatekey and public key (address) generated by account module
PRIVATE_KEY = '14833784535147047463755430645964950224388910221196884607550508724535916442945'
MINER_ADDRESS = '15d3tVyX6VkAGdGECW3Vgv6qNi1UhDrz34'

class CoinBasedTx:
    def __init__(self, BlockHeight):
        self.BlockHeighLittleEndian = BlockHeight.to_bytes(bytes_needed(BlockHeight), 'little')

    def CoinBaseTransaction(self):
        prev_tx = ZERO_HASH
        prev_index = 0xffffffff

        tx_in = []
        tx_in.append(TxIN(prev_tx, prev_index))
        tx_in[0].script_sig.cmds.append(self.BlockHeighLittleEndian )

        tx_out = []
        target_amount = REWARD * 100000000
        target_h160 = decode_base58(MINER_ADDRESS)
        target_script = Script.p2publickey_script(target_h160)
        tx_out.append(TxOut(amount = target_amount, script_puclicKey = target_script))

        return Tx(1, tx_in, tx_out, 0).to_dict()




class Tx:
    def __init__(self, version, tx_in, tx_out, locktime):

        self.version = version
        self.tx_in = tx_in
        self.tx_out = tx_out
        self.locktime = locktime

    def is_coinbase(self):
        """
        # Check that there us exactly 1 input
        # grab the first input and check if the prev_tx is b'\x00' * 32
        # check that the first input prev_index is 0xffffffff
        """

        if len(self.tx_in) != 1:
            return False

        first_input = self.tx_in[0]

        if first_input.prev_tx != b"\x00" * 32:
            return False

        if first_input.prev_index != 0xFFFFFFFF:
            return False

        return True


    def to_dict(self):
        """
        convert coinbased transaction
        convert prev_tx hash in hex from bytes
        convert BlockHeight in hex which is stored in script signature

        """
        if self.is_coinbase():

            self.tx_in[0].prev_tx = self.tx_in[0].prev_tx.hex()
            self.tx_in[0].script_sig.cmds[0] = little_endian_to_int(self.tx_in[0].script_sig.cmds[0])
            self.tx_in[0].script_sig = self.tx_in[0].script_sig.__dict__

        self.tx_in[0] = self.tx_in[0].__dict__

        """"
        convert transaction output to dic
        """

        self.tx_out[0].script_publicKey.cmds[2] = int.from_bytes(self.tx_out[0].script_publicKey.cmds[2], 'little')
        self.tx_out[0].script_publicKey = self.tx_out[0].script_publicKey.__dict__
        self.tx_out[0] = self.tx_out[0].__dict__

        return self.__dict__


class TxIN:
    def __init__(self, prev_tx, prev_index, script_sig = None):
        self.prev_tx = prev_tx
        self.prev_index = prev_index
        if script_sig is None:
            self.script_sig = Script()
        else:
            self.script_sig = script_sig

class TxOut:
    def __init__(self, amount, script_puclicKey):
        self.amount = amount
        self.script_publicKey =script_puclicKey



